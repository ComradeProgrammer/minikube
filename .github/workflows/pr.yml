name: PR
on:
  workflow_dispatch:
  pull_request:
    paths:
      - "go.mod"
      - "**.go"
      - "**.yml"
      - "**.yaml"
      - "Makefile"
      - "!deploy/kicbase/**"
      - "!deploy/iso/**"
env:
  GOPROXY: https://proxy.golang.org
  GO_VERSION: '1.22.1'
permissions:
  contents: read

jobs:
  # Runs before before the functional tests
  # builds the binaries required for testing
  build_minikube_test_binaries:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version: ${{env.GO_VERSION}}
          cache-dependency-path: ./go.sum
      - name: Download Dependencies
        run: go mod download
      - name: Build Binaries
        run: |
          
          whoami
          echo github ref $GITHUB_REF
          echo workflow $GITHUB_WORKFLOW
          echo home $HOME
          echo event name $GITHUB_EVENT_NAME
          echo workspace $GITHUB_WORKSPACE
          echo "end of debug stuff"
          echo $(which jq)

  build_minikube:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version: ${{env.GO_VERSION}}
          cache-dependency-path: ./go.sum

      - name: Build Binaries
        run: |
          whoami
  functional_virtualbox_macos:
    permissions:
      contents: none
    needs: [build_minikube_test_binaries]
    env:
      TIME_ELAPSED: time
      JOB_NAME: "functional_virtualbox_macos"
      GOPOGH_RESULT: ""
      SHELL: "/bin/bash" # To prevent https://github.com/kubernetes/minikube/issues/6643
    runs-on: macos-13
    steps:
      - name: Check architecture
        shell: bash
        run: |
          if [ $(uname -m) != "x86_64" ] 
          then 
              echo "$(uname -m) detected. This test must be run on x86_64"
              exit -1
          fi
          exit 0
      - name: Run Integration Test
        continue-on-error: false
        # bash {0} to allow test to continue to next step. in case of
        shell: bash {0}
        run: |
          cd minikube_binaries
          mkdir -p report
          mkdir -p testhome
      - name: Generate HTML Report
        shell: bash
        run: |
          echo "GOPOGH_RESULT=${GOPOGH_RESULT}" >> $GITHUB_ENV
          echo 'STAT<<EOF' >> $GITHUB_ENV
          echo "${STAT}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        with:
          name: functional_virtualbox_macos
          path: minikube_binaries/report
      - name: The End Result functional_virtualbox_macos
        shell: bash
        run: |
          echo ${GOPOGH_RESULT}

  upload_all_reports:
    permissions:
      contents: none
    if: always()
    needs:
      [
        functional_virtualbox_macos,
      ]
    runs-on: ubuntu-20.04
    steps:
      - name: download all reports
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427
      - name: upload all reports
        shell: bash {0}
        continue-on-error: true
        run: |
          mkdir -p all_reports
          ls -lah
          cp -r ./functional_docker_ubuntu ./all_reports/
          cp -r ./functional_docker_containerd_ubuntu ./all_reports/
          cp -r ./functional_docker_rootless_containerd_ubuntu ./all_reports/
          cp -r ./functional_podman_ubuntu ./all_reports/
          cp -r ./functional_virtualbox_macos ./all_reports/
          cp -r ./functional_baremetal_ubuntu20_04 ./all_reports/

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        with:
          name: all_reports
          path: all_reports